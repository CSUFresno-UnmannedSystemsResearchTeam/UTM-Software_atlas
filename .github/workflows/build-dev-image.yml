name: Development Image

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile.atlas-dev'
      - '.github.workflows/build-dev-images.yml'
      - 'vcpkg,json'  # Rebuild if dependencies changes
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile.atlas-dev'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: csufresno-unmannedsystemsresearchteam/atlas-dev

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better caching

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secres.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag with branch name
            type=ref, event=branch
            
            # Tag with PR number
            type=ref, event=pr
            
            # Tag as 'latest' for main branch
            type=raw, value=latest, enable={{is_default_branch}}
            
            # Tag with commit SHA (short)
            type=sha, prefix={{branch}}-, format=short
          labels: |
            org.opencontainers.image.title=ATLAS Development Environment
            org.opencontainers.image.description=Pre-built development environment for ATLAS
            org.opencontainers.image.vendor=CSU Fresno Umanned Systems Research Team
            org.opencontainers.image.documentation=https://github.com/CSUFresno-UnmannedSystemsResearchTeam/UTM-Software_atlas

      - name: Check if image exists and is recent
        id: check_image
        if: github.event_name != 'workflow_dispatch' || !inputs.force_rebuild
        run: |
          # Try to pull the latest image to check if it exists
          if docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest 2>/dev/null; then
            # Get the creation date of the latest image
            IMAGE_DATE=$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format'{{.Created}}')
            IMAGE_TIMESTAMP=$(date -d "$IMAGE_DATE" +%s)

            # Get the last commit date for Dockerfile
            DOCKERFILE_TIMESTAMP=$(git log -1 --format="%ct" -- Dockerfile.atlas-dev)

            # If image is newer than Dockerfile chagnes, skip build
            if [ $IMAGE_TIMESTAMP -gt $DOCKERFILE_TIMESTAMP ]; then
              echo "skip=true" >> $GITHUB_TOKEN
              echo "Image is up to date, skipping build"
            else
              echo "skip=false" >> $GITHUB_TOKEN
              echo "Dockerfile changed since last image build"
            fi
          else
            echo "skip=false" >> $GITHUB_TOKEN
            echo "No existing image found"
          fi

      - name: Build and push Docker image
        if: steps.check_image.outputs.skip != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dev/Dockerfile
          platforms: linux/amd64, linux/arm64 # Multi-platform build
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-form: type=gha  # GitHub Action cache
          cache-to: type=gha, mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Test the built image
        if: steps.check_image.outputs.skip != 'true'
        run: |
          # Start a test container
          docker run --rm -d --name atlas-test ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest tail -f /dev/null

          # Verifies required tools
          docker exec atlas-test cmake --version
          docker exec atlas-test ninja --version
          docker exec atlas-test python3 --version
          docker exec atlas-test vcpkg --version
          docker exec atlas-test qmake --version || echo "Qt qmake not in PATH, but Qt should be available"

          # Test that atlas user exists and has proper permissions
          docker exec atlas-test whoami
          docker exec atlas-test ls -la /home/atlas

          # Clean up
          docker stop atlas-test

      - name: Image size and info
        if: steps.check_image.outputs.skip != 'true'
        run: |
          echo "## üìä Image Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY

          # Get image size
          SIZE=$(docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format "{{.Size}}")
          echo "| Size | $SIZE |" >> $GITHUB_STEP_SUMMARY

          # Get creation date
          CREATED=$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format='{{.Created}}')
          echo "| Created | $CREATED |" >> $GITHUB_STEP_SUMMARY

          # List main tools versions
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üõ†Ô∏è Installed Tools" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------|" >> $GITHUB_STEP_SUMMARY

          CMAKE_VER=$(docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest cmake --version | head -n1 | cut -d' ' -f3)
          echo "| CMake | $CMAKE_VER |" >> $GITHUB_STEP_SUMMARY

          PYTHON_VER=$(docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python3 --version | cut -d' ' -f2)
          echo "| Python | $PYTHON_VER |" >> $GITHUB_STEP_SUMMARY

          GCC_VER=$(docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest gcc --version | head -n1 | cut -d' ' -f4)
          echo "| GCC | $GCC_VER |" >> $GITHUB_STEP_SUMMARY
        
      - name: Update README with image info
        if: steps.check_image.outputs.skip != 'true' && github.ref == 'refs/heads/main'
        run: |
          # Get image digest
          DIGEST=$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)

          echo "‚úÖ New development image built and published!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Digest: $DIGEST"
          echo ""
          echo "New developers can now use:"
          echo "  docker-compose up -d"
        
      - name: Skipped build notification
        if: steps.check_image.outputs.skip == 'true'
        run: |
          echo "‚è≠Ô∏è Build skipped - image is up to date"
          echo "The existing image is newer than any Dockerfile changes.

