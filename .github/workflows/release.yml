name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: csufresno-unmannedsystemsresearchteam/atlas

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ATLAS ${{ steps.get_version.outputs.version }}
        body: |
          Release ${{ steps.get_version.outputs.version }}
          
          ## Changes
          - See [CHANGELOG.md](CHANGELOG.md) for details
          
          ## Installation
          ```bash
          docker pull ghcr.io/csufresno-unmannedsystemsresearchteam/atlas:${{ steps.get_version.outputs.version }}
          ```
        draft: false
        prerelease: false

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
    
    - name: Build Release
      run: |
        cmake -B build -S . -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake
        cmake --build build --config Release --parallel
    
    - name: Package artifacts
      run: |
        cd build
        cpack -G DEB
        cpack -G RPM
        cpack -G TGZ
    
    - name: Upload DEB package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/atlas-${{ needs.create-release.outputs.version }}-Linux.deb
        asset_name: atlas-${{ needs.create-release.outputs.version }}-Linux.deb
        asset_content_type: application/vnd.debian.binary-package
    
    - name: Upload RPM package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/atlas-${{ needs.create-release.outputs.version }}-Linux.rpm
        asset_name: atlas-${{ needs.create-release.outputs.version }}-Linux.rpm
        asset_content_type: application/x-rpm

  build-production-images:
    name: Build Production Images
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push production images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/prod/Dockerfile.atlas
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
