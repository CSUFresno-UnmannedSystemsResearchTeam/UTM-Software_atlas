name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Debug
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup C++ environment
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy cppcheck
    
    - name: Check code formatting
      run: |
        find apps libs -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror
    
    - name: Run static analysis
      run: |
        find apps libs -name "*.cpp" | xargs cppcheck --error-exitcode=1
    
    - name: Python linting
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python linters
      run: |
        pip install black mypy pylint
    
    - name: Check Python formatting
      run: black --check tools/
    
    - name: Python static analysis
      run: mypy tools/

  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: '2024.01.12'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential cmake ninja-build \
          qt6-base-dev qt6-tools-dev \
          libprotobuf-dev protobuf-compiler \
          libgrpc++-dev protobuf-compiler-grpc
    
    - name: Configure CMake
      run: |
        cmake -B build -S . -G Ninja \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake
    
    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}} --parallel
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: atlas-linux-${{env.BUILD_TYPE}}
        path: build/

  build-windows:
    name: Build (Windows)
    runs-on: windows-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: '2024.01.12'
    
    - name: Configure CMake
      run: |
        cmake -B build -S . -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
          -DCMAKE_TOOLCHAIN_FILE="${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake"
    
    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}} --parallel
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: atlas-windows-${{env.BUILD_TYPE}}
        path: build/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build-linux
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: atlas_test
          POSTGRES_USER: atlas
          POSTGRES_PASSWORD: atlas
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: atlas-linux-${{env.BUILD_TYPE}}
        path: build/
    
    - name: Make binaries executable
      run: chmod +x build/apps/*/atlas* build/tests/*
    
    - name: Run unit tests
      run: |
        cd build
        ctest --output-on-failure --parallel 4 -L unit
      env:
        DATABASE_URL: postgresql://atlas:atlas@localhost:5432/atlas_test
        REDIS_URL: redis://localhost:6379
    
    - name: Run integration tests
      run: |
        cd build
        ctest --output-on-failure --parallel 2 -L integration
      env:
        DATABASE_URL: postgresql://atlas:atlas@localhost:5432/atlas_test
        REDIS_URL: redis://localhost:6379
    
    - name: Generate coverage report
      run: |
        sudo apt-get install -y gcovr
        gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root .
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
